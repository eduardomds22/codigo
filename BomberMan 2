#include <iostream>
#include <windows.h>
#include <conio.h>
#include <cstdlib>
#include <ctime>
#include <thread> ///BIBLIOTECA UTILIZADA PARA FAZER O FUNCIONAMENTO DO CRONOMETRO DA BOMBA
using namespace std;

struct Personagem {
    int x;
    int y;
};

struct Inimigo {
    int x;
    int y;
};

bool bombaExiste = false;

void imprimirMapa(const int m[21][40], Personagem jogador, Inimigo inimigo1, Inimigo inimigo2, Inimigo inimigo3, Inimigo inimigo4, Inimigo inimigo5, Inimigo inimigo6, Inimigo inimigo7, COORD coord) {
        SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);

        //IMPRIME O MAPA E OS PERSONAGENS
        for(int i=0;i<21;i++){
            for(int j=0;j<40;j++){
                if (i == jogador.x && j == jogador.y) {
                cout << char(139); // jogador
            } else if ((i == inimigo1.x && j == inimigo1.y) || (i == inimigo2.x && j == inimigo2.y) || (i == inimigo3.x && j == inimigo3.y) || (i == inimigo4.x && j == inimigo4.y) || (i == inimigo5.x && j == inimigo5.y) || (i == inimigo6.x && j == inimigo6.y) || (i == inimigo7.x && j == inimigo7.y)) {
                cout << char(148); // inimigos
            } else {
                switch (m[i][j]) {
                    case 0: cout << " "; break;
                    case 1: cout << char(219); break;
                    case 2: cout << char(177); break;
                    case 3: cout << char(207); break;
                    case 8: cout << " "; break;
                    case '*': cout << char(158); break;
                }
            }
        }
        cout << "\n";
    }
}

bool posicaoOcupadaPelaBomba(int x, int y, int m[21][40]) {
    return (m[x][y] == 3); //CARACTER QUE REPRESENTA A BOMBAE


}

void colocarBomba(int x, int y, int m[21][40]) {
    if (!bombaExiste) {
        m[x][y] = 3;
        bombaExiste = true;
    }
}

void detonarBomba(int x, int y, int m[21][40]) {
    //EXPLOSAO NA POSICAO DA BOMBA
    m[x][y] = '*'; //RAIO DA EXPLOSAO

    //CIMA
    if (x > 0 && m[x - 1][y] != 1) {
        m[x - 1][y] = '*';
    }

    //BAIXO
    if (x < 20 && m[x + 1][y] != 1) {
        m[x + 1][y] = '*';
    }

    //ESQUERDA
    if (y > 0 && m[x][y - 1] != 1) {
        m[x][y - 1] = '*';
    }

    //DIREITA
    if (y < 34 && m[x][y + 1] != 1) {
        m[x][y + 1] = '*';
    }

    bombaExiste = false;

    //ESPERA 1 SEGUNDO PARA A EXPLOSAO SER REMOVIDA
    Sleep(1000);

    //REMOVE A EXPLOSAO
    m[x][y] = 0;
    if (x > 0 && m[x - 1][y] == '*') {
        m[x - 1][y] = 0;
    }
    if (x < 20 && m[x + 1][y] == '*') {
        m[x + 1][y] = 0;
    }
    if (y > 0 && m[x][y - 1] == '*') {
        m[x][y - 1] = 0;
    }
    if (y < 34 && m[x][y + 1] == '*') {
        m[x][y + 1] = 0;
    }
}
void verificarExplosao(int x, int y, Inimigo& inimigo1, Inimigo& inimigo2, Inimigo& inimigo3, Inimigo& inimigo4, Inimigo& inimigo5, Inimigo& inimigo6, Inimigo& inimigo7, int m[21][40]) {
    if (m[x][y] == '*') {
        cout << "\n - VOCE PERDEU POIS FOI ATINGIDO PELA EXPLOSAO !!!" << endl;
        exit(0);
    }

    if (m[inimigo1.x][inimigo1.y] == '*') {
        inimigo1.x = 1;
        inimigo1.y = 38;
    }
    if (m[inimigo2.x][inimigo2.y] == '*') {
        inimigo2.x = 3;
        inimigo2.y = 38;
    }
    if (m[inimigo3.x][inimigo3.y] == '*') {
        inimigo3.x = 5;
        inimigo3.y = 38;
    }
    if (m[inimigo4.x][inimigo4.y] == '*') {
        inimigo4.x = 7;
        inimigo4.y = 38;
    }
    if (m[inimigo5.x][inimigo5.y] == '*') {
        inimigo5.x = 9;
        inimigo5.y = 38;
    }
    if (m[inimigo6.x][inimigo6.y] == '*') {
        inimigo6.x = 11;
        inimigo6.y = 38;
    }
    if (m[inimigo7.x][inimigo7.y] == '*') {
        inimigo7.x = 13;
        inimigo7.y = 38;
    }

}

void explosaoAssincrona(int x, int y, int m[21][40]) {
    Sleep(3000); // ESPERA 3 SEGUNDOS PARA EXPLODIR
    detonarBomba(x, y, m);
}
bool verificarVitoria(Inimigo inimigo1, Inimigo inimigo2, Inimigo inimigo3, Inimigo inimigo4, Inimigo inimigo5, Inimigo inimigo6, Inimigo inimigo7) {
    return (inimigo1.x == 1 && inimigo1.y == 38 &&
            inimigo2.x == 3 && inimigo2.y == 38 &&
            inimigo3.x == 5 && inimigo3.y == 38 &&
            inimigo4.x == 7 && inimigo4.y == 38 &&
            inimigo5.x == 9 && inimigo5.y == 38 &&
            inimigo6.x == 11 && inimigo6.y == 38 &&
            inimigo7.x == 13 && inimigo7.y == 38);
}

void geracaoaleatoria (int m[21][40]) {

 double probabilidade = 0.5; //ESCOLHE A PROPABILIDADE DA GERAÇÃO

    //PERCORRE A MATRIZ VERIFICANDO SE OS NUMEROS PODEM VIRAR 2
    for (int i = 0; i < 21; i++) {
        for (int j = 0; j < 40; j++) {
            //VERIFICA SE OO VALOR É 0
            if (m[i][j] == 0) {
                //GERA UM NUMERO ALEATORIO
                double aleatorio = (double)rand() / RAND_MAX;

                //VERIFICA O NUMERO ALEATORIO
                if (aleatorio < probabilidade) {
                    m[i][j] = 2; //FAZ A MUDANÇA PARA 2
                }
            }
        }
    }

}
Personagem movimentacaoJogador (int m[21][40], Personagem jogador) {
if (_kbhit()) {
            char tecla;
            tecla = getch();
            switch(tecla) {
                case 72: case 'w': ///CIMA
                    if(m[jogador.x - 1][jogador.y] != 1 && m[jogador.x - 1][jogador.y] != 2 && !posicaoOcupadaPelaBomba(jogador.x - 1, jogador.y, m)) {
                        jogador.x--;
                    }
                    break;
                case 80: case 's': ///BAIXO
                    if(m[jogador.x + 1][jogador.y] != 1 && m[jogador.x + 1][jogador.y] != 2 && !posicaoOcupadaPelaBomba(jogador.x + 1, jogador.y, m)) {
                        jogador.x++;
                    }
                    break;
                case 75: case 'a': ///ESQUERDA
                    if (m[jogador.x][jogador.y - 1] != 1 && m[jogador.x][jogador.y - 1] != 2 && !posicaoOcupadaPelaBomba(jogador.x, jogador.y - 1, m)) {
                        jogador.y--;
                    }
                    break;
                case 77: case 'd': ///DIREITA
                    if (m[jogador.x][jogador.y + 1] != 1 && m[jogador.x][jogador.y + 1] != 2 && !posicaoOcupadaPelaBomba(jogador.x, jogador.y + 1, m)) {
                        jogador.y++;
                    }
                    break;
                case 32: /// ESPAÇO PARA COLOCACAO DA BOMBA
                    if (!bombaExiste) {
                        colocarBomba(jogador.x, jogador.y, m);
                        bombaExiste = true;
                        thread t(explosaoAssincrona, jogador.x, jogador.y, m);
                        t.detach(); // DESANEXA A THREAD
                    }
                    break;
            }
        }

  return jogador; }

Inimigo movimentacaoInimigo(int m[21][40], int dificuldade,Inimigo inimigo){
    int MovimentoAleatorio1 = rand() % dificuldade + 1;
        switch(MovimentoAleatorio1) {
            case 1:
                if(m[inimigo.x - 1][inimigo.y] != 1 && m[inimigo.x - 1][inimigo.y] != 2 && !posicaoOcupadaPelaBomba(inimigo.x - 1, inimigo.y, m)) {
                    inimigo.x--;
                }
                break;
            case 2:
                if(m[inimigo.x + 1][inimigo.y] != 1 && m[inimigo.x + 1][inimigo.y] != 2 && !posicaoOcupadaPelaBomba(inimigo.x + 1, inimigo.y, m)) {
                    inimigo.x++;
                }
                break;
            case 3:
                if (m[inimigo.x][inimigo.y - 1] != 1 && m[inimigo.x][inimigo.y - 1] != 2 && !posicaoOcupadaPelaBomba(inimigo.x, inimigo.y - 1, m)) {
                    inimigo.y--;
                }
                break;
            case 4:
                if (m[inimigo.x][inimigo.y + 1] != 1 && m[inimigo.x][inimigo.y + 1] != 2 && !posicaoOcupadaPelaBomba(inimigo.x, inimigo.y + 1, m)) {
                    inimigo.y++;
                }
                break;
        }
    return inimigo;
  }
  void MostrarMenu (int& escolha, int& dificuldade, bool& sair,bool voltar,bool back){
      while(!back){
        system("cls");
        voltar=false;
        cout << "_" << endl;
        cout << "     * BEM VINDO AO BOMBERMAN *    " << endl;
        cout << "        |* MENU DE OPCOES *|     \n" << endl;
        cout << "  1 - INICIAR O JOGO               " << endl;
        cout << "  2 - ESCOLHA DA DIFICULDADE       " << endl;
        cout << "  3 - CRIADORES                    " << endl;
        cout << "  4 - TUTORIAL E REGRAS DO JOGO    " << endl;
        cout << "  5 - SAIR DO JOGO                 " << endl;
        cout << "_" << endl;
        cin >> escolha;
        system("cls");


        if(escolha==1){ //INICIA O JOGO
            back =true;
        }
        if(escolha==2){ // ESCOLHA DA DIFICULDADE
                while (voltar==false){
                    cout << "_\n " << endl; // ESCOLHER O TEMPO DE MOVIMENTO DOS INIMIGOS DO JOGO
                    cout << "     |SELECIONE A DIFICULDADE| \n       " << endl;
                    cout << "          1 - FACIL                     " << endl;
                    cout << "          2 - MEDIO                     " << endl;
                    cout << "          3 - DIFICIL\n                 " << endl;
                    cout << "  DIGITE [0] PARA RETORNAR AO MENU\n    " << endl;
                    cout << "_____________________________________   " << endl;
                    cin >> escolha;
                    system("cls");
                    if(escolha == 1){
                        dificuldade=40;
                        cout << "_______________________________________________________________  " << endl;
                        cout << " * DIFICULDADE ALTERADA - VOCE SELECIONOU A DIFICULDADE FACIL *  " << endl;
                        cout << "_______________________________________________________________  " << endl;
                        Sleep(2000);
                        system("cls");
                    }
                    if(escolha == 2){
                        dificuldade=30;
                        cout << "_______________________________________________________________  " << endl;
                        cout << " * DIFICULDADE ALTERADA - VOCE SELECIONOU A DIFICULDADE MEDIA *  " << endl;
                        cout << "_______________________________________________________________  " << endl;
                        Sleep(2000);
                        system("cls");
                    }
                    if(escolha == 3){
                        dificuldade=40;
                        cout << "_______________________________________________________________  " << endl;
                        cout << " * DIFICULDADE ALTERADA - VOCE SELECIONOU A DIFICULDADE FACIL *  " << endl;
                        cout << "_______________________________________________________________  " << endl;
                        Sleep(2000);
                        system("cls");
                    }
                    if(escolha == 0){
                        voltar=true;
                    }
                }
        }
        if (escolha==3){ //INFORMAÇÃO SOBRE ALUNOS E PROFESSOR
            cout << "_______________________________________________________________  " << endl;
            cout << "               * INFORMACAO SOBRE OS CRIADORES * \n             " << endl;
            cout << "                CAIO CARDOSO  -  EDUARDOS MENDES \n              " << endl;
            cout << "                   ALGORITMOS E PROGRAMACAO II \n                " << endl;
            cout << "                    PROFESSOR - ALEX RESE  \n                    " << endl;
            cout << "_______________________________________________________________  " << endl;
            system("pause");
            }
        if (escolha==4){ //REGRAS E TUTORIAL DO JOGO
            cout << "____________________________________________________________________  " << endl;
            cout << "                   * REGRAS DO JOGO E TUTORIAL * \n                   " << endl;
            cout << "     O JOGADOR DEVE USAR AS SEGUINTES TECLAS PARA SE MOVIMENTAR :     " << endl;
            cout << "    A = DIREITA, S = BAIXO, D = ESQUERDA, W = CIMA OU PELAS SETAS \n  " << endl;
            cout << "       O JOGADOR DEVE APERTAR A TECLA ESPAÇO PARA SOLTAR A BOMBA\n    " << endl;
            cout << "   - O JOGADOR GANHA AO PRENDER OS INIMIGOS QUANDO SAO EXPLODIDOS -   " << endl;
            cout << "   -  O JOGADOR NAO PODE SER ATINGIDO PELA BOMBA E NEM SE COLIDIR -   " << endl;
            cout << "____________________________________________________________________  " << endl;
            system("pause");
        }
        if (escolha==5){
           cout << "____________________________________________________________________  " << endl;
           cout << "      !!!    VOCE ENCERROU O JOGO, ATE UMA PROXIMA VEZ   !!!          " << endl;
           cout << "____________________________________________________________________  " << endl;
            sair==true;
            break;
        }
    }

  }

int main(){

    srand(time(NULL));
    char tecla1;
    int num, escolha, fase=1, dificuldade=30;
    bool back=false, voltar=false, ganhou=false,sair=false;
    MostrarMenu(escolha, dificuldade, sair,voltar,back);
    if (!sair){
        return 0;
    }
     if (escolha == 1) {
        cout << "fdddddddddddddddddddddddddddd" << endl;
    }


        //ALERTA: NAO MODIFICAR O TRECHO DE CODIGO, A SEGUIR.
        //INICIO: COMANDOS PARA QUE O CURSOR NAO FIQUE PISCANDO NA TELA
        HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);
        CONSOLE_CURSOR_INFO     cursorInfo;
        GetConsoleCursorInfo(out, &cursorInfo);
        cursorInfo.bVisible = false; // set the cursor visibilite
        SetConsoleCursorInfo(out, &cursorInfo);
        //FIM: COMANDOS PARA QUE O CURSOR NAO FIQUE PISCANDO NA TELA
        //INICIO: COMANDOS PARA REPOSICIONAR O CURSOR NO INICIO DA TELA
        short int CX=0, CY=0;
        COORD coord;
        coord.X = CX;
        coord.Y = CY;
        //FIM: COMANDOS PARA REPOSICIONAR O CURSOR NO INICIO DA TELA
        //ALERTA: NAO MODIFICAR O TRECHO DE CODIGO, ACIMA.

int m1 [21][40] = { {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1},

                    {1,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,8,2,2,2,2,8,2,2,2,2,8,8,8,8,8,8,8,1,8,1},

                    {1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,8,2,8,8,8,8,2,8,8,2,8,8,8,8,8,8,8,1,1,1},

                    {1,8,8,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,8,2,2,2,2,8,2,2,2,2,8,8,8,8,8,8,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,2,8,8,8,8,2,8,8,2,8,8,8,8,8,8,8,1,1,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,2,8,8,8,8,2,8,8,2,8,8,8,2,8,8,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,2,2,8,8,8,1,1,1},

                    {1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,8,2,2,2,2,8,2,2,2,2,8,8,8,2,8,8,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,2,8,8,8,8,2,8,8,8,8,8,8,2,8,8,8,1,1,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,2,2,2,2,8,2,2,2,2,8,2,2,2,2,2,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,8,8,8,2,8,2,8,8,8,8,8,8,8,8,8,8,1,1,1},

                    {1,8,8,0,1,0,0,0,0,1,0,0,0,0,1,0,0,8,8,1,8,2,2,2,2,8,2,2,2,2,8,8,8,8,8,8,8,1,8,1},

                    {1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1},

                    {1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,1},

                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1},

                    {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},

                    {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},

                    {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},

                    {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},

                    {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},

                    {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},};



 int m2[21][40] = { {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1},

                    {1,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,8,2,2,2,2,8,2,2,2,2,8,8,8,8,8,1,8,1},

                    {1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,8,2,8,8,8,8,2,8,8,2,8,8,8,8,8,1,1,1},

                    {1,8,8,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,8,2,2,2,2,8,2,2,2,2,8,8,8,8,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,1,8,2,8,8,8,8,2,8,8,2,8,2,2,2,8,1,1,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,1,8,2,8,8,8,8,2,8,8,2,8,8,8,2,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,1,8,8,8,8,8,8,8,8,8,8,8,2,2,2,8,1,1,1},

                    {1,0,0,0,1,0,0,8,1,2,2,2,1,8,0,0,0,1,0,0,0,1,8,2,2,2,2,8,2,2,2,2,8,2,8,8,8,1,8,1},

                    {1,0,0,0,0,0,0,8,8,8,2,8,2,8,0,0,0,0,0,0,0,1,8,2,8,8,8,8,2,8,8,8,8,2,2,2,8,1,1,1},

                    {1,0,0,0,0,0,0,8,8,8,2,8,0,8,0,0,0,0,0,0,0,1,8,2,2,2,2,8,2,2,2,2,8,8,8,8,8,1,8,1},

                    {1,0,0,0,0,0,0,8,2,8,2,8,2,8,0,0,0,0,0,0,0,1,8,8,8,8,2,8,2,8,8,8,8,8,8,8,8,1,1,1},

                    {1,0,0,0,1,0,0,0,1,2,2,2,1,0,0,0,0,1,0,0,0,1,8,2,2,2,2,8,2,2,2,2,8,8,8,8,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1},

                    {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},

                    {1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},

                    {1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},

                    {1,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},

                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},

                    {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},};


  int m3 [21][40] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,1,1,1},

                    {1,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,1,8,8,1,8,1},

                    {1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,8,8,1,1,1},

                    {1,8,8,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,8,8,1,8,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,8,1,1,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,8,1,1,1},

                    {1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,8,8,1,8,1},

                    {1,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,1,8,8,1,1,1},

                    {1,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,1,8,8,1,8,1},

                    {1,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,1,8,8,1,1,1},

                    {1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,8,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,8,1,1,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,8,1,8,1},

                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,8,1,1,1},

                    {1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,8,8,8,8,8},

                    {1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,8,8,8,8,8},

                    {1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,8,8,8,8,8},

                    {1,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,1,8,8,8,8,8},

                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,8},

                    {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},};

    geracaoaleatoria(m1);

    //POSICAO INICIAL DOS JOGADORES E INIMIGOS
    Personagem jogador = {1, 1};
    Inimigo inimigo1 = {1, 18};
    Inimigo inimigo2 = {13, 1};
    Inimigo inimigo3 = {13, 18};
    Inimigo inimigo4 = {7, 38};
    Inimigo inimigo5 = {9, 38};
    Inimigo inimigo6 = {11 ,38};
    Inimigo inimigo7 = {13, 38};


       // TECLAS A SEREM PRESSIONADAS

    while(!ganhou){ //enquanto o usuario nao ganhou

        if(fase==1){
            imprimirMapa(m1, jogador, inimigo1, inimigo2, inimigo3, inimigo4, inimigo5, inimigo6, inimigo7, coord); //IMPRIME O MAPA

            //VERIFICACAO DE DERROTA EM CASO DO INIMIGO ATINGIR O JOGADOR
            if (jogador.x == inimigo1.x && jogador.y == inimigo1.y || jogador.x == inimigo2.x && jogador.y == inimigo2.y || jogador.x == inimigo3.x && jogador.y == inimigo3.y || jogador.x == inimigo4.x && jogador.y == inimigo4.y || jogador.x == inimigo5.x && jogador.y == inimigo5.y || jogador.x == inimigo6.x && jogador.y == inimigo6.y || jogador.x == inimigo7.x && jogador.y == inimigo7.y) { //VERIFICA A COLISAO DOS INIMIGOS COM O USUARIO
                cout << "- VOCE PERDEU POIS FOI ATINGIDO POR UM INIMIGO -" << endl;
                return 0;
            }

            //VERIFICACAO DE VITORIA EM CASO DE EXPLOSAO DOS INIMIGOS
            if (verificarVitoria(inimigo1, inimigo2, inimigo3, inimigo4, inimigo5, inimigo6, inimigo7)) {
                cout << "!!! PARABENS, VOCE EXPLODIU TODOS OS INIMIGO E PASSOU PARA O PROXIMO NIVEL!!!" << endl;
                cout << "APERTE QUALQUER TECLA PARA IR PARA PROXIMA FASE"<< endl;
                getch();
                system("cls");
                jogador =  {1, 1};
                inimigo1 = {1, 18};
                inimigo2 = {18, 1};
                inimigo3 = {18,18};
                inimigo4 = {9,11};
                inimigo5 = {9,9};
                inimigo6 = {11,38};
                inimigo7 = {13,38};
                geracaoaleatoria(m2);
                fase = 2;

            }

            //EXECUTA OS MOVIMENTOS DO USUARIO
            jogador=movimentacaoJogador(m1, jogador);

            ///MOVIMENTACAO DOS INIMIGOS - IMPEDE COLISAO COM PAREDES E A POSICAO QUE A BOMBA OCUPA ANTES DE SER EXPLODIDA
            // Movimento dos inimigos
            inimigo1 = movimentacaoInimigo(m1,dificuldade,inimigo1);
            inimigo2 = movimentacaoInimigo(m1,dificuldade,inimigo2);
            inimigo3 = movimentacaoInimigo(m1,dificuldade,inimigo3);
            inimigo4 = movimentacaoInimigo(m1,dificuldade,inimigo4);
            inimigo5 = movimentacaoInimigo(m1,dificuldade,inimigo5);
            inimigo6 = movimentacaoInimigo(m1,dificuldade,inimigo6);
            inimigo7 = movimentacaoInimigo(m1,dificuldade,inimigo7);

            ///VERIFICA SE OS INIMIGOS OU O JOGADOR FORAM ATINGIDOS PELO RAIO DA BOMBA
            verificarExplosao(jogador.x, jogador.y, inimigo1, inimigo2, inimigo3, inimigo4, inimigo5, inimigo6, inimigo7, m1);
        }
        if(fase==2){
            imprimirMapa(m2, jogador, inimigo1, inimigo2, inimigo3, inimigo4, inimigo5, inimigo6, inimigo7, coord); //IMPRIME O MAPA

            //VERIFICACAO DE DERROTA EM CASO DO INIMIGO ATINGIR O JOGADOR
            if (jogador.x == inimigo1.x && jogador.y == inimigo1.y || jogador.x == inimigo2.x && jogador.y == inimigo2.y || jogador.x == inimigo3.x && jogador.y == inimigo3.y || jogador.x == inimigo4.x && jogador.y == inimigo4.y || jogador.x == inimigo5.x && jogador.y == inimigo5.y || jogador.x == inimigo6.x && jogador.y == inimigo6.y || jogador.x == inimigo7.x && jogador.y == inimigo7.y) { //VERIFICA A COLISAO DOS INIMIGOS COM O USUARIO
                cout << "- VOCE PERDEU POIS FOI ATINGIDO POR UM INIMIGO -" << endl;
                return 0;
            }

            //VERIFICACAO DE VITORIA EM CASO DE EXPLOSAO DOS INIMIGOS
            if (verificarVitoria(inimigo1, inimigo2, inimigo3, inimigo4, inimigo5, inimigo6, inimigo7)) {
                cout << "!!! PARABENS, VOCE EXPLODIU TODOS OS INIMIGO E PASSOU PARA O PROXIMO NIVEL!!!" << endl;
                getch();
                system("cls");
            jogador = {1, 1};
            inimigo1 = {1, 33};
            inimigo2 = {18, 1};
            inimigo3 = {18, 33};
            inimigo4 = {8, 7};
            inimigo5 = {8, 27};
            inimigo6 = {5 ,17};
            inimigo7 = {13, 17};
                geracaoaleatoria(m3);
                fase = 3;
            }

            //EXECUTA OS MOVIMENTOS DO USUARIO
            jogador=movimentacaoJogador(m2, jogador);

            ///MOVIMENTACAO DOS INIMIGOS - IMPEDE COLISAO COM PAREDES E A POSICAO QUE A BOMBA OCUPA ANTES DE SER EXPLODIDA
            // Movimento dos inimigos
            inimigo1 = movimentacaoInimigo(m2,dificuldade,inimigo1);
            inimigo2 = movimentacaoInimigo(m2,dificuldade,inimigo2);
            inimigo3 = movimentacaoInimigo(m2,dificuldade,inimigo3);
            inimigo4 = movimentacaoInimigo(m2,dificuldade,inimigo4);
            inimigo5 = movimentacaoInimigo(m2,dificuldade,inimigo5);
            inimigo6 = movimentacaoInimigo(m2,dificuldade,inimigo6);
            inimigo7 = movimentacaoInimigo(m2,dificuldade,inimigo7);

            ///VERIFICA SE OS INIMIGOS OU O JOGADOR FORAM ATINGIDOS PELO RAIO DA BOMBA
            verificarExplosao(jogador.x, jogador.y, inimigo1, inimigo2, inimigo3, inimigo4, inimigo5, inimigo6, inimigo7, m2);
        }
        if(fase==3){
            imprimirMapa(m3, jogador, inimigo1, inimigo2, inimigo3, inimigo4, inimigo5, inimigo6, inimigo7, coord); //IMPRIME O MAPA

            //VERIFICACAO DE DERROTA EM CASO DO INIMIGO ATINGIR O JOGADOR
           if (jogador.x == inimigo1.x && jogador.y == inimigo1.y || jogador.x == inimigo2.x && jogador.y == inimigo2.y || jogador.x == inimigo3.x && jogador.y == inimigo3.y || jogador.x == inimigo4.x && jogador.y == inimigo4.y || jogador.x == inimigo5.x && jogador.y == inimigo5.y || jogador.x == inimigo6.x && jogador.y == inimigo6.y || jogador.x == inimigo7.x && jogador.y == inimigo7.y) { //VERIFICA A COLISAO DOS INIMIGOS COM O USUARIO
                cout << "- VOCE PERDEU POIS FOI ATINGIDO POR UM INIMIGO -" << endl;
                return 0;
            }

            //VERIFICACAO DE VITORIA EM CASO DE EXPLOSAO DOS INIMIGOS
            if (verificarVitoria(inimigo1, inimigo2, inimigo3, inimigo4, inimigo5, inimigo6, inimigo7)) {
                cout << "!!! PARABENS, VOCE EXPLODIU TODOS OS INIMIGO E VENCEU O JOGO !!!" << endl;
                ganhou = true;
            }

            //EXECUTA OS MOVIMENTOS DO USUARIO
            jogador=movimentacaoJogador(m3, jogador);

            ///MOVIMENTACAO DOS INIMIGOS - IMPEDE COLISAO COM PAREDES E A POSICAO QUE A BOMBA OCUPA ANTES DE SER EXPLODIDA
            // Movimento dos inimigos
            inimigo1 = movimentacaoInimigo(m3,dificuldade,inimigo1);
            inimigo2 = movimentacaoInimigo(m3,dificuldade,inimigo2);
            inimigo3 = movimentacaoInimigo(m3,dificuldade,inimigo3);
            inimigo4 = movimentacaoInimigo(m3,dificuldade,inimigo4);
            inimigo5 = movimentacaoInimigo(m3,dificuldade,inimigo5);
            inimigo6 = movimentacaoInimigo(m3,dificuldade,inimigo6);
            inimigo7 = movimentacaoInimigo(m3,dificuldade,inimigo7);

            ///VERIFICA SE OS INIMIGOS OU O JOGADOR FORAM ATINGIDOS PELO RAIO DA BOMBA
            verificarExplosao(jogador.x, jogador.y, inimigo1, inimigo2, inimigo3, inimigo4, inimigo5, inimigo6, inimigo7, m3);
        }
    }

return 0;
}



